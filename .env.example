# ============================================================================
# SNAKE SURVIVAL - ENVIRONMENT VARIABLES
# ============================================================================
#
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control!
#

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL database URL (for production)
# Format: postgresql://username:password@host:port/database
# Example: postgresql://myuser:mypassword@localhost:5432/snake
DATABASE_URL=postgresql://username:password@localhost:5432/snake

# Note: If DATABASE_URL is not set, the app will use SQLite in development mode
# SQLite file will be created at: snake_survival.db


# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================

# Session Secret (for Flask sessions)
# Generate secure random string for production:
# python3 -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=dev-session-secret-change-in-production


# ============================================================================
# RATE LIMITING (Redis)
# ============================================================================

# Redis URL (for rate limiting and caching)
# Format: redis://host:port/db_number
# Leave empty to use in-memory storage (not recommended for production)
REDIS_URL=redis://localhost:6379/0

# For Redis Cloud or Railway Redis:
# REDIS_URL=redis://username:password@host:port/0


# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Flask Environment
# Options: development, production
FLASK_ENV=development

# Server Port
PORT=5000

# Server Host
HOST=0.0.0.0


# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Allowed origins for CORS (comma-separated)
# Example: https://yourdomain.com,https://www.yourdomain.com
CORS_ORIGINS=*


# ============================================================================
# OPTIONAL: LOGGING & MONITORING
# ============================================================================

# Log Level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO


# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================
#
# PRODUCTION CHECKLIST:
#
# 1. Database:
#    - Set DATABASE_URL to your PostgreSQL instance
#    - Or use SQLite fallback (not recommended for production)
#
# 2. Security:
#    - Generate new SECRET_KEY with: python3 -c "import secrets; print(secrets.token_urlsafe(32))"
#    - Secret should be a long random string
#
# 3. Rate Limiting:
#    - Set up Redis instance (Railway Redis, Redis Cloud, etc.)
#    - Set REDIS_URL to your Redis connection string
#
# 4. Environment:
#    - Set FLASK_ENV=production
#    - Set appropriate LOG_LEVEL
#    - Configure CORS_ORIGINS to your frontend domains
#
# 5. Server:
#    - Use gunicorn with eventlet worker (already configured)
#    - Railway handles SSL/HTTPS automatically
#
# ============================================================================
